# Common git settings.
#
# Update ~/.gitconfig to look something like this:

# [user]
#   name = [name]
#   email = [email]
#
# [github]
#   user = [username]
#   token = [token]
#
# [include]
#   path = /path/to/this/file/gitconfig
#


[alias]
  a = add --all .
  b = branch
  co = checkout
  dt = difftool
  mt = mergetool
  st = status -sb
  sh = stash

  # Short grep command that groups results by file and shows line numbers
  g = grep --break --heading --line-number --color

  # How big is your change?  e.g. git stat master --cached
  stat = diff --stat

  # Various shortcuts for committing.
  c = commit
  ca = commit -a
  cm = commit -m
  cam = commit -a -m

  # Git logs.
  graph = log --graph --full-history --all --color --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s"

  # Amend previous commit with all changes in the workspace.
  amend = commit -a --amend --no-edit

  # Prune remotes.
  proon = remote update --prune

  # Create a new branch from freshly updated master.
  # start = !git checkout master && git pull origin master && git checkout -b

  # Rebase help.
  rb = rebase
  continue = !git add -A && git rebase --continue
  abort = rebase --abort

  # List my local and remote branches (ignoring stderr about bad refs etc.)
  branches = !git branch -avv --color=always 2>/dev/null | grep dpup

  # Send out a pull-request (requires separate script)
  pr = pull-request

  # Stashes modified files, runs git sync, pops stash (requires git-sync script)
  stash-sync = !git stash && git sync && git stash pop

  # Flag a file to not be included in commits, e.g. config files.
  assume = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"

  # Stashes current changes without reverting them.
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"

  # Assumes TODOs are in the form `TODO(dan):`
  todo = !git grep -n TODO\\($USER\\) | cut -d':' -f1,2,4

  # Branches from the current branch, naming the new branch with the suffux "-next"
  next = !git co -b "$(git branch-name)-next"

  # Prints the current branch name without parens like __git_ps1.
  branch-name = !git for-each-ref --format='%(refname:short)' `git symbolic-ref HEAD`

[color]
  branch = auto
  diff = auto
  interactive = auto
  status = auto

[format]
  pretty = format:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset

[push]
  default = current

[branch "master"]
  rebase = true

[rerere]
  enabled = true
